// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package atproto

import (
	"fmt"
	"io"
	"math"
	"sort"

	util "github.com/bluesky-social/indigo/lex/util"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *Alert) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 22

	if t.AffectedZones == nil {
		fieldCount--
	}

	if t.Ends == nil {
		fieldCount--
	}

	if t.Expires == nil {
		fieldCount--
	}

	if t.Geometry == nil {
		fieldCount--
	}

	if t.Instruction == nil {
		fieldCount--
	}

	if t.Onset == nil {
		fieldCount--
	}

	if t.ReplacedAt == nil {
		fieldCount--
	}

	if t.ReplacedBy == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Id (string) (string)
	if len("id") > 1000000 {
		return xerrors.Errorf("Value in field \"id\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("id"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("id")); err != nil {
		return err
	}

	if len(t.Id) > 1000000 {
		return xerrors.Errorf("Value in field t.Id was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Id))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Id)); err != nil {
		return err
	}

	// t.Ends (string) (string)
	if t.Ends != nil {

		if len("ends") > 1000000 {
			return xerrors.Errorf("Value in field \"ends\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ends"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("ends")); err != nil {
			return err
		}

		if t.Ends == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.Ends) > 1000000 {
				return xerrors.Errorf("Value in field t.Ends was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.Ends))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.Ends)); err != nil {
				return err
			}
		}
	}

	// t.Sent (string) (string)
	if len("sent") > 1000000 {
		return xerrors.Errorf("Value in field \"sent\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("sent"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("sent")); err != nil {
		return err
	}

	if len(t.Sent) > 1000000 {
		return xerrors.Errorf("Value in field t.Sent was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Sent))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Sent)); err != nil {
		return err
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 1000000 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("social.watchedsky.alert"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("social.watchedsky.alert")); err != nil {
		return err
	}

	// t.Event (string) (string)
	if len("event") > 1000000 {
		return xerrors.Errorf("Value in field \"event\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("event"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("event")); err != nil {
		return err
	}

	if len(t.Event) > 1000000 {
		return xerrors.Errorf("Value in field t.Event was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Event))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Event)); err != nil {
		return err
	}

	// t.Onset (string) (string)
	if t.Onset != nil {

		if len("onset") > 1000000 {
			return xerrors.Errorf("Value in field \"onset\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("onset"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("onset")); err != nil {
			return err
		}

		if t.Onset == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.Onset) > 1000000 {
				return xerrors.Errorf("Value in field t.Onset was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.Onset))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.Onset)); err != nil {
				return err
			}
		}
	}

	// t.Sender (string) (string)
	if len("sender") > 1000000 {
		return xerrors.Errorf("Value in field \"sender\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("sender"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("sender")); err != nil {
		return err
	}

	if len(t.Sender) > 1000000 {
		return xerrors.Errorf("Value in field t.Sender was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Sender))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Sender)); err != nil {
		return err
	}

	// t.Status (string) (string)
	if len("status") > 1000000 {
		return xerrors.Errorf("Value in field \"status\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("status"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("status")); err != nil {
		return err
	}

	if len(t.Status) > 1000000 {
		return xerrors.Errorf("Value in field t.Status was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Status))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Status)); err != nil {
		return err
	}

	// t.Expires (string) (string)
	if t.Expires != nil {

		if len("expires") > 1000000 {
			return xerrors.Errorf("Value in field \"expires\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("expires"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("expires")); err != nil {
			return err
		}

		if t.Expires == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.Expires) > 1000000 {
				return xerrors.Errorf("Value in field t.Expires was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.Expires))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.Expires)); err != nil {
				return err
			}
		}
	}

	// t.Urgency (string) (string)
	if len("urgency") > 1000000 {
		return xerrors.Errorf("Value in field \"urgency\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("urgency"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("urgency")); err != nil {
		return err
	}

	if len(t.Urgency) > 1000000 {
		return xerrors.Errorf("Value in field t.Urgency was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Urgency))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Urgency)); err != nil {
		return err
	}

	// t.Geometry (util.LexBlob) (struct)
	if t.Geometry != nil {

		if len("geometry") > 1000000 {
			return xerrors.Errorf("Value in field \"geometry\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("geometry"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("geometry")); err != nil {
			return err
		}

		if err := t.Geometry.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Headline (string) (string)
	if len("headline") > 1000000 {
		return xerrors.Errorf("Value in field \"headline\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("headline"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("headline")); err != nil {
		return err
	}

	if len(t.Headline) > 1000000 {
		return xerrors.Errorf("Value in field t.Headline was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Headline))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Headline)); err != nil {
		return err
	}

	// t.Severity (string) (string)
	if len("severity") > 1000000 {
		return xerrors.Errorf("Value in field \"severity\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("severity"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("severity")); err != nil {
		return err
	}

	if len(t.Severity) > 1000000 {
		return xerrors.Errorf("Value in field t.Severity was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Severity))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Severity)); err != nil {
		return err
	}

	// t.Certainty (string) (string)
	if len("certainty") > 1000000 {
		return xerrors.Errorf("Value in field \"certainty\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("certainty"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("certainty")); err != nil {
		return err
	}

	if len(t.Certainty) > 1000000 {
		return xerrors.Errorf("Value in field t.Certainty was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Certainty))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Certainty)); err != nil {
		return err
	}

	// t.Effective (string) (string)
	if len("effective") > 1000000 {
		return xerrors.Errorf("Value in field \"effective\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("effective"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("effective")); err != nil {
		return err
	}

	if len(t.Effective) > 1000000 {
		return xerrors.Errorf("Value in field t.Effective was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Effective))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Effective)); err != nil {
		return err
	}

	// t.ReplacedAt (string) (string)
	if t.ReplacedAt != nil {

		if len("replacedAt") > 1000000 {
			return xerrors.Errorf("Value in field \"replacedAt\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("replacedAt"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("replacedAt")); err != nil {
			return err
		}

		if t.ReplacedAt == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.ReplacedAt) > 1000000 {
				return xerrors.Errorf("Value in field t.ReplacedAt was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.ReplacedAt))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.ReplacedAt)); err != nil {
				return err
			}
		}
	}

	// t.ReplacedBy (string) (string)
	if t.ReplacedBy != nil {

		if len("replacedBy") > 1000000 {
			return xerrors.Errorf("Value in field \"replacedBy\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("replacedBy"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("replacedBy")); err != nil {
			return err
		}

		if t.ReplacedBy == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.ReplacedBy) > 1000000 {
				return xerrors.Errorf("Value in field t.ReplacedBy was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.ReplacedBy))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.ReplacedBy)); err != nil {
				return err
			}
		}
	}

	// t.SenderName (string) (string)
	if len("senderName") > 1000000 {
		return xerrors.Errorf("Value in field \"senderName\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("senderName"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("senderName")); err != nil {
		return err
	}

	if len(t.SenderName) > 1000000 {
		return xerrors.Errorf("Value in field t.SenderName was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.SenderName))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.SenderName)); err != nil {
		return err
	}

	// t.Description (string) (string)
	if len("description") > 1000000 {
		return xerrors.Errorf("Value in field \"description\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("description"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("description")); err != nil {
		return err
	}

	if len(t.Description) > 1000000 {
		return xerrors.Errorf("Value in field t.Description was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Description))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Description)); err != nil {
		return err
	}

	// t.Instruction (string) (string)
	if t.Instruction != nil {

		if len("instruction") > 1000000 {
			return xerrors.Errorf("Value in field \"instruction\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("instruction"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("instruction")); err != nil {
			return err
		}

		if t.Instruction == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.Instruction) > 1000000 {
				return xerrors.Errorf("Value in field t.Instruction was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.Instruction))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.Instruction)); err != nil {
				return err
			}
		}
	}

	// t.MessageType (string) (string)
	if len("messageType") > 1000000 {
		return xerrors.Errorf("Value in field \"messageType\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("messageType"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("messageType")); err != nil {
		return err
	}

	if len(t.MessageType) > 1000000 {
		return xerrors.Errorf("Value in field t.MessageType was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.MessageType))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.MessageType)); err != nil {
		return err
	}

	// t.AffectedZones ([]string) (slice)
	if t.AffectedZones != nil {

		if len("affectedZones") > 1000000 {
			return xerrors.Errorf("Value in field \"affectedZones\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("affectedZones"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("affectedZones")); err != nil {
			return err
		}

		if len(t.AffectedZones) > 8192 {
			return xerrors.Errorf("Slice value in field t.AffectedZones was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.AffectedZones))); err != nil {
			return err
		}
		for _, v := range t.AffectedZones {
			if len(v) > 1000000 {
				return xerrors.Errorf("Value in field v was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(v)); err != nil {
				return err
			}

		}
	}
	return nil
}

func (t *Alert) UnmarshalCBOR(r io.Reader) (err error) {
	*t = Alert{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("Alert: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadStringWithMax(cr, 1000000)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Id (string) (string)
		case "id":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Id = string(sval)
			}
			// t.Ends (string) (string)
		case "ends":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.Ends = (*string)(&sval)
				}
			}
			// t.Sent (string) (string)
		case "sent":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Sent = string(sval)
			}
			// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.Event (string) (string)
		case "event":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Event = string(sval)
			}
			// t.Onset (string) (string)
		case "onset":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.Onset = (*string)(&sval)
				}
			}
			// t.Sender (string) (string)
		case "sender":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Sender = string(sval)
			}
			// t.Status (string) (string)
		case "status":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Status = string(sval)
			}
			// t.Expires (string) (string)
		case "expires":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.Expires = (*string)(&sval)
				}
			}
			// t.Urgency (string) (string)
		case "urgency":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Urgency = string(sval)
			}
			// t.Geometry (util.LexBlob) (struct)
		case "geometry":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Geometry = new(util.LexBlob)
					if err := t.Geometry.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Geometry pointer: %w", err)
					}
				}

			}
			// t.Headline (string) (string)
		case "headline":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Headline = string(sval)
			}
			// t.Severity (string) (string)
		case "severity":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Severity = string(sval)
			}
			// t.Certainty (string) (string)
		case "certainty":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Certainty = string(sval)
			}
			// t.Effective (string) (string)
		case "effective":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Effective = string(sval)
			}
			// t.ReplacedAt (string) (string)
		case "replacedAt":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.ReplacedAt = (*string)(&sval)
				}
			}
			// t.ReplacedBy (string) (string)
		case "replacedBy":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.ReplacedBy = (*string)(&sval)
				}
			}
			// t.SenderName (string) (string)
		case "senderName":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.SenderName = string(sval)
			}
			// t.Description (string) (string)
		case "description":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.Description = string(sval)
			}
			// t.Instruction (string) (string)
		case "instruction":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 1000000)
					if err != nil {
						return err
					}

					t.Instruction = (*string)(&sval)
				}
			}
			// t.MessageType (string) (string)
		case "messageType":

			{
				sval, err := cbg.ReadStringWithMax(cr, 1000000)
				if err != nil {
					return err
				}

				t.MessageType = string(sval)
			}
			// t.AffectedZones ([]string) (slice)
		case "affectedZones":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.AffectedZones: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.AffectedZones = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{
						sval, err := cbg.ReadStringWithMax(cr, 1000000)
						if err != nil {
							return err
						}

						t.AffectedZones[i] = string(sval)
					}

				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
